# -*- coding: utf-8 -*-
"""algotrading.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ulIkwAGhWlGpuasXgaWlDF7SGq598RSm
"""

!pip install yfinance

import numpy as np
import pandas as pd
import requests
import math
import tensorflow
from datetime import datetime as dt
from pandas_datareader import data as web
import yfinance as yf
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#dual moving average crossover
#when short term average crosses a long term average
#means momentum is shifting in the favour of the short term average
#buy when STA crosses the LTA above
#sell when STA crosses the LTA below

def save_to_csv_from_yahoo(ticker, syear, smonth, sday, eyear, emonth, eday):
    start = dt(syear, smonth, sday)
    end = dt(eyear, emonth, eday)
    df = web.DataReader(ticker, 'yahoo', start, end)
    df.to_csv('data.csv')
    return df

df=yf.download(['AAPL'])
len(df)

plt.figure(figsize=(20,10))
plt.plot(df['Adj Close'])

!pip install ta

from ta.trend import SMAIndicator

sma30=SMAIndicator(df['Adj Close'],30)
sma100=SMAIndicator(df['Adj Close'],100)
df['sma30']=sma30.sma_indicator()
df['sma100']=sma100.sma_indicator()

plt.figure(figsize=(20,10))
plt.plot(df['sma100'],label='sma100')
plt.plot(df['sma30'],label='sma30')
plt.legend(loc='upper left')

df=df[['Adj Close','sma30','sma100']]
df

def signal(data):
    signal_price_to_buy=[]
    signal_price_to_sell=[]
    flag=False
    for i in range(len(data)):
        if i+1 <len(data) and data['sma30'][i-1]<data['sma100'][i-1] and data['sma30'][i]>data['sma100'][i+1]:
            signal_price_to_buy.append(data['Adj Close'][i])
            signal_price_to_sell.append(np.nan)    
        elif i+1 <len(data) and data['sma30'][i-1]>data['sma100'][i-1] and data['sma30'][i]<data['sma100'][i+1]:
            signal_price_to_buy.append(np.nan)
            signal_price_to_sell.append(data['Adj Close'][i])
        else:
            signal_price_to_buy.append(np.nan)
            signal_price_to_sell.append(np.nan)
    return (signal_price_to_buy,signal_price_to_sell)

buy,sell=signal(df)
df['buy']=buy
df['sell']=sell

plt.figure(figsize=(20,10))
tdf=df[-700:]

plt.plot(tdf['Adj Close'],label='price',alpha=0.35)
plt.plot(tdf['sma30'],label='STA',alpha=0.35)
plt.plot(tdf['sma100'],label='LTA',alpha=0.35)
plt.scatter(tdf.index,tdf['buy'],label='buy',color='g')
plt.scatter(tdf.index,tdf['sell'],label='sell',color='r')

type(df['buy'][0])# is np.nan
#df['buy'][0]
np.isnan(df['buy'][0])

profit=0
buy=False
count=0
boughtat=0
for i in range(len(df)):
    if buy==False:
        if not np.isnan(df['buy'][i]):
            profit=profit-df['buy'][i]
            buy=True
            count+=1
            boughtat=df['buy'][i]
    else:
        if not np.isnan(df['sell'][i]):
            profit=profit+df['sell'][i]
            count-=1
            buy=False
if(count==1):
    profit+=boughtat  
print(profit)

# #MACD cross over strategy
# When the MACD crosses above the zero line, buy – or close a short trade – 
# and when the MACD crosses below the zero line, sell – or close a long position. Because of the delayed nature of this strategy, it should be utilised with caution in quick, choppy markets since the indications will often arrive too late

df=yf.download(['AAPL'])
df

from ta.trend import MACD
macd=MACD(df['Adj Close'],26,12)

df['macd']=macd.macd()
df['macd signal']=macd.macd_signal()

plt.figure(figsize=(20,10))
tdf=df[-700:]

#plt.plot(tdf['Adj Close'],label='price',alpha=0.35)
plt.plot(tdf['macd'],label='STA',alpha=0.35)
plt.plot(tdf['macd signal'],label='LTA',alpha=0.35)

df=df[['Adj Close','macd','macd signal']]

def signal(data):
    signal_price_to_buy=[]
    signal_price_to_sell=[]
    flag=-1
    for i in range(len(data)):
        if data['macd'][i]>data['macd signal'][i]:
            signal_price_to_sell.append(np.nan) 
            if flag!=1:
                signal_price_to_buy.append(data['Adj Close'][i])
                flag=1
            else:
                signal_price_to_buy.append(np.nan)

        elif data['macd'][i]<data['macd signal'][i]:
            signal_price_to_buy.append(np.nan)
            if flag!=0:
                flag=0
                signal_price_to_sell.append(data['Adj Close'][i])
            else:
                signal_price_to_sell.append(np.nan)
        else:
            signal_price_to_buy.append(np.nan)
            signal_price_to_sell.append(np.nan)
    
    return (signal_price_to_buy,signal_price_to_sell)

buy,sell=signal(df)
df['buy']=buy
df['sell']=sell

plt.figure(figsize=(20,10))
tdf=df

plt.plot(tdf['Adj Close'],label='price',alpha=0.35)

plt.scatter(tdf.index,tdf['buy'],label='buy',color='g')
plt.scatter(tdf.index,tdf['sell'],label='sell',color='r')

profit=0
buy=False
count=0
boughtat=0
for i in range(len(df)):
    if buy==False:
        if not np.isnan(df['buy'][i]):
            profit=profit-df['buy'][i]
            buy=True
            count+=1
            boughtat=df['buy'][i]
    else:
        if not np.isnan(df['sell'][i]):
            profit=profit+df['sell'][i]
            count-=1
            buy=False
if(count==1):
    profit+=boughtat  
print(profit)

